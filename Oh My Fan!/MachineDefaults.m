///:
/*****************************************************************************
 **                                                                         **
 **                               .======.                                  **
 **                               | INRI |                                  **
 **                               |      |                                  **
 **                               |      |                                  **
 **                      .========'      '========.                         **
 **                      |   _      xxxx      _   |                         **
 **                      |  /_;-.__ / _\  _.-;_\  |                         **
 **                      |     `-._`'`_/'`.-'     |                         **
 **                      '========.`\   /`========'                         **
 **                               | |  / |                                  **
 **                               |/-.(  |                                  **
 **                               |\_._\ |                                  **
 **                               | \ \`;|                                  **
 **                               |  > |/|                                  **
 **                               | / // |                                  **
 **                               | |//  |                                  **
 **                               | \(\  |                                  **
 **                               |  ``  |                                  **
 **                               |      |                                  **
 **                               |      |                                  **
 **                               |      |                                  **
 **                               |      |                                  **
 **                   \\    _  _\\| \//  |//_   _ \// _                     **
 **                  ^ `^`^ ^`` `^ ^` ``^^`  `^^` `^ `^                     **
 **                                                                         **
 **                       Copyright (c) 2014 Tong G.                        **
 **                          ALL RIGHTS RESERVED.                           **
 **                                                                         **
 ****************************************************************************/

#import "MachineDefaults.h"
#import "NSFileManager+DirectoryLocations.h"

@implementation MachineDefaults


- (id)init:(NSString*)p_machine{
    if (self = [super init]){
        machine=[MachineDefaults computerModel];
        supported_machines=[[NSArray alloc] initWithContentsOfFile:[[[NSFileManager defaultManager] applicationSupportDirectory] stringByAppendingPathComponent:@"Machines.plist"]];
    }
	return self;
}


-(Boolean)is_supported{
	int i;
	supported=NO;
	for(i=0;i<[supported_machines count];i++) {
		if ([machine isEqualToString:[[supported_machines objectAtIndex:i] objectForKey:@"Machine"]]) {
			supported=YES;
			machine_num=i;
		}
	}
	return supported;
}



-(NSDictionary*) readfrom_plist{
	if (!supported) {return nil;}
	return [supported_machines objectAtIndex:machine_num];
}



-(NSDictionary*) readfrom_smc{
	if (supported) {return nil;}
	int num_fans,i;
	[smcWrapper init];	
	num_fans=[smcWrapper get_fan_num];
	NSString  *desc;
	NSNumber *min,*max;
	NSData *xmldata;
	NSString *error;
	NSMutableArray *fans=[[NSMutableArray alloc] init];
	for (i = 0; i < num_fans; i++) {
    #if FUCKING_CODE
		min=[NSNumber numberWithInt:[smcWrapper get_min_speed:i]];
    #endif
        min = @2105;
		max=[NSNumber numberWithInt:[smcWrapper get_max_speed:i]];
		desc=[smcWrapper get_fan_descr:i];
		[fans addObject:[NSDictionary dictionaryWithObjectsAndKeys:desc,@"Description",min,@"Minspeed",max,@"Maxspeed",min,@"selspeed",nil]];
	}
	//save to plist for future
	NSMutableArray *supported_m=[[NSMutableArray alloc] initWithContentsOfFile:[[[NSFileManager defaultManager] applicationSupportDirectory] stringByAppendingPathComponent:@"Machines.plist"]];
	NSDictionary *new_machine= [NSDictionary dictionaryWithObjectsAndKeys:fans,@"Fans",[NSNumber numberWithInt:num_fans],@"NumFans",machine,@"Machine",@"Autogenerated",@"Comment",nil];
	[fans release];
	[supported_m addObject:new_machine];
	
	//save to plist
	xmldata = [NSPropertyListSerialization dataFromPropertyList:supported_m
                                       format:NSPropertyListXMLFormat_v1_0
                                       errorDescription:&error];
	[xmldata writeToFile:[[[NSFileManager defaultManager] applicationSupportDirectory] stringByAppendingPathComponent:@"Machines.plist"] atomically:YES];
	[supported_m release];
	//return new machine-live-data
	return new_machine;
}




-(NSDictionary*)get_machine_defaults{
	NSDictionary *m_defaults=nil;
	if ([self is_supported]) {
		m_defaults=[self readfrom_plist];
		int i;
		//localize fan-descriptions
		for (i=0;i<[[m_defaults objectForKey:@"Fans"] count];i++) {
			NSString *newvalue=NSLocalizedString([[[m_defaults objectForKey:@"Fans"] objectAtIndex:i] objectForKey:@"Description"],nil);
			[[[m_defaults objectForKey:@"Fans"] objectAtIndex:i] setValue:newvalue forKey:@"Description"];
		}
	} else {
    #if FUCKING_CODE
		NSAlert *alert = [NSAlert alertWithMessageText:NSLocalizedString(@"Alert!",nil) 
						  defaultButton:NSLocalizedString(@"Continue",nil) alternateButton:NSLocalizedString(@"Quit",nil) otherButton:nil
						informativeTextWithFormat:NSLocalizedString(@"smcFanControl has not been tested on this machine yet, but it should run if you follow the instructions. \n\nIf you choose to continue, please make you have no other FanControl-software running. Otherwise please quit, deinstall the other software, restart your machine and rerun smcFanControl!",nil)];
		int code=[alert runModal];
		if (code==NSAlertDefaultReturn) {
			m_defaults=[self readfrom_smc];
		} else {
			[[NSApplication sharedApplication] terminate:nil];
		}
    #endif
        m_defaults=[self readfrom_smc];
	}
	return m_defaults;
}

+ (NSString *)computerModel
{
    static NSString *computerModel = nil;
    if (!computerModel) {
        io_service_t pexpdev;
        if ((pexpdev = IOServiceGetMatchingService (kIOMasterPortDefault, IOServiceMatching("IOPlatformExpertDevice"))))
        {
            NSData *data;
            if ((data = (id)IORegistryEntryCreateCFProperty(pexpdev, CFSTR("model"), kCFAllocatorDefault, 0))) {
                computerModel = [[NSString allocWithZone:NULL]  initWithCString:[data bytes] encoding:NSASCIIStringEncoding];
                [data release];
            }
        }
    }
    return computerModel;
}

- (void)dealloc{
	[super dealloc];
	//[supported_machines release];
}

NSInteger static minSpeedForThisMac;
NSInteger static maxSpeedForThisMac;
- ( NSInteger ) minSpeedForThisMac
    {
    if ( minSpeedForThisMac == 0 )
        {
        NSDictionary* info = [ self get_machine_defaults ];
        minSpeedForThisMac = [ [ [ [ info objectForKey: @"Fans"  ] firstObject ] objectForKey: @"Minspeed" ] integerValue ];
        }

    return minSpeedForThisMac;
    }

- ( NSInteger ) maxSpeedForThisMac
    {
    if ( maxSpeedForThisMac == 0 )
        {
        NSDictionary* info = [ self get_machine_defaults ];
        maxSpeedForThisMac = [ [ [ [ info objectForKey: @"Fans"  ] firstObject ] objectForKey: @"Maxspeed" ] integerValue ];
        }

    return maxSpeedForThisMac;
    }

- ( NSInteger ) calculateSpeedAccordingTickVal: ( double )_TickVal
    {
    NSInteger minSpeed = [ self minSpeedForThisMac ];
    NSInteger maxSpeed = [ self maxSpeedForThisMac ];

    return ( ( maxSpeed - minSpeed ) / 100 ) * _TickVal + minSpeed;
    }

- ( int ) numFans
    {
    NSDictionary* info = [ self get_machine_defaults ];
    return [ [ info objectForKey: @"NumFans" ] intValue ];
    }

@end

//////////////////////////////////////////////////////////////////////////////

/*****************************************************************************
 **                                                                         **
 **      _________                                      _______             **
 **     |___   ___|                                   / ______ \            **
 **         | |     _______   _______   _______      | /      |_|           **
 **         | |    ||     || ||     || ||     ||     | |    _ __            **
 **         | |    ||     || ||     || ||     ||     | |   |__  \           **
 **         | |    ||     || ||     || ||     ||     | \_ _ __| |  _        **
 **         |_|    ||_____|| ||     || ||_____||      \________/  |_|       **
 **                                           ||                            **
 **                                    ||_____||                            **
 **                                                                         **
 ****************************************************************************/
///:~